JavaDoc
==========
Everything below this line is autogenerated from the javadoc from the repo, but it is manually updated.


org.firstinspires.ftc.teamcode.Robot
_________________________________________

.. function:: public Robot(@NonNull HardwareMap hardwareMap, @NonNull Telemetry telemetry, ElapsedTime timer,


  :param timer:         The elapsed time

  :param allianceColor: the alliance color

.. function:: public double joystickDeadzoneCorrection(double joystickInput)

  Discards joystick inputs between -joystickDeadZone and joystickDeadZone

  :param joystickInput: the input of the joystick
  None


org.firstinspires.ftc.teamcode.Auto.Auto
_____________________________________________

.. function:: public abstract class Auto extends LinearOpMode

  Auto creates a robots and runs it in auto mode.
  Auto currently just initializes the Robot as Auto.runOpMode() is empty.
  Tasks:
  Deliver duck from carousel (10)
  Deliver freight to hub (6)
     - deliver freight to corresponding level of custom element (20)
  Park in warehouse (10)

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode

.. function:: public void initAuto(AllianceColor allianceColor)

  Initializes the robot class and sets the robot as the newly initialized robot.

  :param allianceColor: The alliance color


org.firstinspires.ftc.teamcode.Auto.AutoCycleBlueA2
________________________________________________________


org.firstinspires.ftc.teamcode.Auto.AutoCycleBlueA5
________________________________________________________


org.firstinspires.ftc.teamcode.Auto.AutoCycleRedF2
_______________________________________________________


org.firstinspires.ftc.teamcode.Auto.AutoCycleRedF5
_______________________________________________________


org.firstinspires.ftc.teamcode.Auto.AutoPark
_________________________________________________


org.firstinspires.ftc.teamcode.DriveControl.BoundingBox
____________________________________________________________

.. function:: public BoundingBox(ConvexArea bounds)

  The bounding box generates a box to represent an objects position.

  :param bounds: The boundary of the object


org.firstinspires.ftc.teamcode.DriveControl.Field
______________________________________________________

.. function:: public class Field

  Represents a Field with game objects.

.. function:: public boolean isOccupied(Coordinate coordinate)

  Checks if the coordinate is occupied by an object

  :param coordinate: the coordinate to use
  None


org.firstinspires.ftc.teamcode.DriveControl.GameObject
___________________________________________________________


org.firstinspires.ftc.teamcode.DriveControl.Path
_____________________________________________________


org.firstinspires.ftc.teamcode.DriveControl.PathFile
_________________________________________________________


org.firstinspires.ftc.teamcode.DriveControl.RobotModel
___________________________________________________________


org.firstinspires.ftc.teamcode.DriveControl.Waypoint
_________________________________________________________


org.firstinspires.ftc.teamcode.Subsystems.Subsystem
________________________________________________________

.. function:: public abstract class Subsystem

  Superclass to all subsystems, it does some bootstrapping for them (Vision, Control, and Drive)

.. function:: public Subsystem(Telemetry telemetry, String tag)

  inits with telemetry, since every subsystem uses it.

  :param telemetry: The telemetry for logging


org.firstinspires.ftc.teamcode.Subsystems.Control.Control
______________________________________________________________

.. function:: public class Control extends Subsystem

  Control subsystem for controlling arms and claws


org.firstinspires.ftc.teamcode.Subsystems.Drive.Drive
__________________________________________________________

.. function:: public class Drive extends Subsystem

  Mecanum drivetrain subsystem

.. function:: public Drive(DcMotorEx frontLeft, DcMotorEx frontRight, DcMotorEx rearLeft, DcMotorEx rearRight, Telemetry telemetry, ElapsedTime elapsedTime)

  Initializes the drive subsystem

  :param frontLeft:   The front left motor in the drive train

  :param frontRight:  The front right motor

  :param rearLeft:    The rear left motor

  :param rearRight:   The rear right motor

  :param telemetry:   The telemetry

  :param elapsedTime: The timer for the elapsed time

.. function:: public void setZeroPowerBehavior(DcMotor.ZeroPowerBehavior mode)

  Uniformly sets zero power behavior of all drive motors

  :param mode:

.. function:: public void setRunMode(DcMotor.RunMode mode)

  Uniformly sets run mode of all drive motors

  :param mode:

.. function:: public void setDrivePowers(double[] powers)

  Sets the drive power of each motor individually.

  :param powers: the powers to set each of the motors to

.. function:: private void stop()

  Sets all drive motor powers to zero

.. function:: public double[] calcMotorPowers(double leftStickX, double leftStickY, double rightStickX)

  Calculates the motor powers when given the position o the left and right sticks

  :param leftStickX:  left joystick x position

  :param leftStickY:  left joystick y position

  :param rightStickX: right joystick x position for turning
  None

.. function:: public void allMotorPIDControl(int[] tickCount)

  PID motor control program to ensure all four motors are synchronized

  :param tickCount:


org.firstinspires.ftc.teamcode.Subsystems.Drive.PID
________________________________________________________

.. function:: public double calculate(double target, double measured)

  calculate PID output

  :param target: the target position

  :param measured: current system state
  None

.. function:: public double getDT()

  get the time constant
  None


org.firstinspires.ftc.teamcode.Subsystems.Vision.ConeColorPipeline
_______________________________________________________________________

.. function:: public class ConeColorPipeline extends OpenCvPipeline

  This pipeline detects where the cone is.
  It does this by splitting the camera input into 3 parts, the Left, Middle, and Right. It
  checks each part for a custom marker (which is set to be green in the code), or some blue or red
  tape, dependant on the alliance color. The marker is assumed to be yellow.

  See Also: OpenCvPipeline

  See Also: Vision

.. function:: public enum ConeColor

  The cone color with the hsv constants

.. function:: public ConeColorPipeline(int width, int height)

  Class instantiation

  See Also: Robot

  See Also: Telemetry

.. function:: public Mat processFrame(Mat input)

  This method detects where the marker is.

  :param input: A Mask (the class is called {@link Mat})
  None

  See Also: Mat

  See Also: Scalar

  See Also: ConeColor

.. function:: public ConeColor getConeColor()

  Gets the Marker Location, might be not found because of the Search Status.
  None

  See Also: ConeColor


org.firstinspires.ftc.teamcode.Subsystems.Vision.Vision
____________________________________________________________

.. function:: public class Vision extends Subsystem

  The Vision Subsystem

  See Also: ConeColorPipeline

  See Also: <a href="https://github.com/OpenFTC/EasyOpenCV">EasyOpenCV</a>

.. function:: public Vision(

  Class instantiation

  :param telemetry:   Telemetry

  :param hardwareMap: the hardware map

  :param allianceColor: the alliance color

.. function:: public ConeColorPipeline.ConeColor detectConeColor()

  This method waits until the search for the marker is done, and then it return the marker
  location. It waits until the marker is found, then it returns the marker location.
  None


org.firstinspires.ftc.teamcode.Subsystems.Vision.VisionCorrectionThread
____________________________________________________________________________


org.firstinspires.ftc.teamcode.Subsystems.Vision.VisionCorrectionThreadData
________________________________________________________________________________


org.firstinspires.ftc.teamcode.Subsystems.Web.LogController
________________________________________________________________


org.firstinspires.ftc.teamcode.Subsystems.Web.WebThread
____________________________________________________________


org.firstinspires.ftc.teamcode.Subsystems.Web.WebThreadData
________________________________________________________________


org.firstinspires.ftc.teamcode.Teleop.Teleop
_________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.BackwardTest
_______________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.CameraPOV
____________________________________________________

.. function:: public class CameraPOV extends LinearOpMode

  This shows what the camera is seeing


org.firstinspires.ftc.teamcode.Testop.CaptureImages
________________________________________________________

.. function:: public class CaptureImages extends LinearOpMode

  This OpMode illustrates how to open a webcam and retrieve images from it. It requires a configuration
  containing a webcam with the default name ("Webcam 1"). When the opmode runs, pressing the 'A' button
  will cause a frame from the camera to be written to a file on the device, which can then be retrieved
  by various means (e.g.: Device File Explorer in Android Studio; plugging the device into a PC and
  using Media Transfer; ADB; etc)

.. function:: private void onNewFrame(Bitmap frame)

  Do something with the frame


org.firstinspires.ftc.teamcode.Testop.DriveTest
____________________________________________________


org.firstinspires.ftc.teamcode.Testop.ForwardTest
______________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.MotorTest
____________________________________________________


org.firstinspires.ftc.teamcode.Testop.ServoTest
____________________________________________________


org.firstinspires.ftc.teamcode.Testop.StrafeTest
_____________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.SwerveTest
_____________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.TurnTest
___________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.VectorTest
_____________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.VectorTest2
______________________________________________________

.. function:: public void runOpMode() throws InterruptedException

  Override of runOpMode()
  Please do not swallow the InterruptedException, as it is used in cases where the op mode
  needs to be terminated early.

  See Also: com.qualcomm.robotcore.eventloop.opmode.LinearOpMode


org.firstinspires.ftc.teamcode.Testop.VisionTest
_____________________________________________________

.. function:: public class VisionTest extends LinearOpMode

  This shows what the camera is seeing


org.firstinspires.ftc.teamcode.Util.AllianceColor
______________________________________________________

.. function:: public enum AllianceColor

  The robot's current alliance, either red or blue


org.firstinspires.ftc.teamcode.Util.Coordinate
___________________________________________________

.. function:: public Coordinate(double x, double y)

  Simple constructor.
  Build a vector from its coordinates

  :param x: abscissa

  :param y: ordinate

  See Also: #getX()

  See Also: #getY()

.. function:: public Coordinate(double[] v) throws DimensionMismatchException

  Simple constructor.
  Build a vector from its coordinates

  :param v: coordinates array
  None

  See Also: #toArray()

.. function:: public Coordinate(double a, Vector2D u)

  Multiplicative constructor
  Build a vector from another one and a scale factor.
  The vector built will be a * u

  :param a: scale factor

  :param u: base (unscaled) vector

.. function:: public Coordinate(double a1, Vector2D u1, double a2, Vector2D u2)

  Linear constructor
  Build a vector from two other ones and corresponding scale factors.
  The vector built will be a1 * u1 + a2 * u2

  :param a1: first scale factor

  :param u1: first base (unscaled) vector

  :param a2: second scale factor

  :param u2: second base (unscaled) vector

.. function:: public Coordinate(double a1, Vector2D u1, double a2, Vector2D u2, double a3, Vector2D u3)

  Linear constructor
  Build a vector from three other ones and corresponding scale factors.
  The vector built will be a1 * u1 + a2 * u2 + a3 * u3

  :param a1: first scale factor

  :param u1: first base (unscaled) vector

  :param a2: second scale factor

  :param u2: second base (unscaled) vector

  :param a3: third scale factor

  :param u3: third base (unscaled) vector

.. function:: public Coordinate(double a1, Vector2D u1, double a2, Vector2D u2, double a3, Vector2D u3, double a4, Vector2D u4)

  Linear constructor
  Build a vector from four other ones and corresponding scale factors.
  The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4

  :param a1: first scale factor

  :param u1: first base (unscaled) vector

  :param a2: second scale factor

  :param u2: second base (unscaled) vector

  :param a3: third scale factor

  :param u3: third base (unscaled) vector

  :param a4: fourth scale factor

  :param u4: fourth base (unscaled) vector


org.firstinspires.ftc.teamcode.Util.ThreadExceptionHandler
_______________________________________________________________


org.firstinspires.ftc.teamcode.Util.Vector
_______________________________________________

.. function:: public Vector(double x, double y)

  Simple constructor.
  Build a vector from its coordinates

  :param x: abscissa

  :param y: ordinate

  See Also: #getX()

  See Also: #getY()

.. function:: public Vector(double[] v) throws DimensionMismatchException

  Simple constructor.
  Build a vector from its coordinates

  :param v: coordinates array
  None

  See Also: #toArray()

.. function:: public Vector(double a, Vector2D u)

  Multiplicative constructor
  Build a vector from another one and a scale factor.
  The vector built will be a * u

  :param a: scale factor

  :param u: base (unscaled) vector

.. function:: public Vector(double a1, Vector2D u1, double a2, Vector2D u2)

  Linear constructor
  Build a vector from two other ones and corresponding scale factors.
  The vector built will be a1 * u1 + a2 * u2

  :param a1: first scale factor

  :param u1: first base (unscaled) vector

  :param a2: second scale factor

  :param u2: second base (unscaled) vector

.. function:: public Vector(double a1, Vector2D u1, double a2, Vector2D u2, double a3, Vector2D u3)

  Linear constructor
  Build a vector from three other ones and corresponding scale factors.
  The vector built will be a1 * u1 + a2 * u2 + a3 * u3

  :param a1: first scale factor

  :param u1: first base (unscaled) vector

  :param a2: second scale factor

  :param u2: second base (unscaled) vector

  :param a3: third scale factor

  :param u3: third base (unscaled) vector

.. function:: public Vector(double a1, Vector2D u1, double a2, Vector2D u2, double a3, Vector2D u3, double a4, Vector2D u4)

  Linear constructor
  Build a vector from four other ones and corresponding scale factors.
  The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4

  :param a1: first scale factor

  :param u1: first base (unscaled) vector

  :param a2: second scale factor

  :param u2: second base (unscaled) vector

  :param a3: third scale factor

  :param u3: third base (unscaled) vector

  :param a4: fourth scale factor

  :param u4: fourth base (unscaled) vector


org.firstinspires.ftc.teamcode.Util.WebLog
_______________________________________________
